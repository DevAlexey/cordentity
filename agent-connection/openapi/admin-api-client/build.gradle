apply plugin: 'org.openapi.generator'

def swaggerDir = "${rootDir}/agent-connection/openapi"
def swaggerSpec = "$swaggerDir/admin-api-swagger.yaml"
def mainPackage = "com.luxoft.blockchainlab.hyperledger.indy.agent.admin.client"
def title = "Agent Admin API Client"
jar.baseName = 'agent-admin-api-client'

dependencies {
    // openapi client dependencies
    compile "com.squareup.okhttp3:okhttp:$okhttp_version"
    compile "com.squareup.okhttp3:logging-interceptor:$okhttp_version"
    compile "com.google.code.gson:gson:$gson_version"
    compile "io.swagger:swagger-annotations:$swagger_version"
    compile "io.gsonfire:gson-fire:$gson_fire_version"
    compile "com.google.code.findbugs:jsr305:3.0.2"
}

task buildClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "java"
    inputSpec = swaggerSpec.toString()
    outputDir = "$buildDir/generated/swagger".toString()
    apiPackage     = "${mainPackage}.api".toString()
    modelPackage   = "${mainPackage}.model".toString()
    withXml = false
    generateApiDocumentation = true
    generateModelDocumentation = true
    generateModelTests = false
    generateApiTests = false

    configOptions = [
            title: title,
            packageName: mainPackage.toString(),
            library: "okhttp-gson",
            // use strings due to https://github.com/OpenAPITools/openapi-generator/issues/1271
            dateLibrary: "java8",
            collectionType: "list",
            enumPropertyNaming: 'UPPERCASE'
    ]
    skipOverwrite = false // Protects overwritten methods model classes

    // customize missing parts
    inputs.file(inputSpec)
    outputs.dir(outputDir)
    doFirst {
        delete outputDir
    }

    doLast {
//        generateSerializer(buildClient, "src/main/java", mainPackage)
    }
}

task generateApi() {
    dependsOn buildClient
}

def getOutputDir(task, srcDir) {
    def outputDir = task.outputDir.get()
    return "$outputDir/$srcDir"
}

def generateSerializer(task, srcDir, mainPackage) {
    copy {
        from 'src/main/template'
        into getOutputDir(task, "$srcDir/${mainPackage.replaceAll("[.]", "/")}" )
        expand( packageName: mainPackage )
        rename '(.*)[.]in', '$1'
    }
}

compileJava.dependsOn tasks.generateApi

apply plugin: 'idea'

idea {
    module {
        // Not using generatedSourceDirs because of
        // https://discuss.gradle.org/t/support-for-intellij-2016/15294/8
        sourceDirs += file(getOutputDir(buildClient, "/src/main/java"))
    }
}

sourceSets {
    main.java {
        srcDirs += getOutputDir(buildClient, "/src/main/java")
    }
}
