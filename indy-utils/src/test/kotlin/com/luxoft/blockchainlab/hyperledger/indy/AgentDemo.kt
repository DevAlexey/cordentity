package com.luxoft.blockchainlab.hyperledger.indy


import com.evernym.sdk.vcx.connection.ConnectionApi
import com.evernym.sdk.vcx.credential.CredentialApi
import com.evernym.sdk.vcx.credentialDef.CredentialDefApi
import com.evernym.sdk.vcx.issuer.IssuerApi
import com.evernym.sdk.vcx.proof.DisclosedProofApi
import com.evernym.sdk.vcx.proof.ProofApi
import com.evernym.sdk.vcx.schema.SchemaApi
import com.evernym.sdk.vcx.utils.UtilsApi
import com.evernym.sdk.vcx.vcx.VcxApi
import com.evernym.sdk.vcx.wallet.WalletApi
import com.fasterxml.jackson.annotation.JsonProperty
import com.luxoft.blockchainlab.hyperledger.indy.roles.getIdentity
import com.luxoft.blockchainlab.hyperledger.indy.utils.EnvironmentUtils
import com.luxoft.blockchainlab.hyperledger.indy.utils.PoolManager
import com.luxoft.blockchainlab.hyperledger.indy.utils.SerializationUtils
import com.luxoft.blockchainlab.hyperledger.indy.utils.StorageUtils
import org.hyperledger.indy.sdk.LibIndy
import org.hyperledger.indy.sdk.did.Did
import org.hyperledger.indy.sdk.did.DidResults
import org.hyperledger.indy.sdk.pool.Pool
import org.hyperledger.indy.sdk.pool.PoolJSONParameters
import org.hyperledger.indy.sdk.pool.PoolLedgerConfigExistsException
import org.hyperledger.indy.sdk.wallet.Wallet
import org.junit.*
import java.io.File
import java.nio.file.Files
import java.util.*
import java.util.concurrent.ExecutionException
import java.nio.file.Files.createSymbolicLink
import java.nio.file.Paths


class AgentDemo {
    val faberProvisionConfig = VcxProvisionConfig()
    val aliceProvisionConfig = VcxProvisionConfig()
    lateinit var faberConfigDetails: VcxProvisionConfigDetails
    lateinit var aliceConfigDetails: VcxProvisionConfigDetails
    val INVITE_FILENAME = "/home/joinu/vcx-invite.txt"

    val TEST_GENESIS_FILE_PATH by lazy { javaClass.classLoader.getResource("docker.txn").file }
    val LOG_LEVEL = "TRACE"

    @Before
    @Throws(Exception::class)
    fun setUp() {
        println("Setting LOG_LEVEL to $LOG_LEVEL")
        System.setProperty(org.slf4j.simple.SimpleLogger.DEFAULT_LOG_LEVEL_KEY, LOG_LEVEL)

        println("Linking libnullpay native library")
        Nullpay.INSTANCE.nullpay_init()
    }

    @After
    @Throws(Exception::class)
    fun tearDown() {
    }

    @Test
    @Ignore
    fun `vcx + indy using single wallet`() {
        println("Removing trash")
        StorageUtils.cleanupStorage()

        val config = VcxProvisionConfig()
        val configDetailsJson = UtilsApi.vcxAgentProvisionAsync(SerializationUtils.anyToJSON(config)).get()

        val configDetails: VcxProvisionConfigDetails = SerializationUtils.jSONToAny(configDetailsJson)
        configDetails.institutionName = "Me"
        configDetails.institutionLogoUrl = "http://robohash.org/234"
        configDetails.genesisPath = TEST_GENESIS_FILE_PATH

        VcxApi.vcxInitWithConfig(SerializationUtils.anyToJSON(configDetails)).get()

        val pool = PoolManager.openIndyPool(File(TEST_GENESIS_FILE_PATH), "pool1-indy")
        val wallet = openIndyWallet(configDetails.walletName, configDetails.walletKey)
        val me = IndyUser(pool, wallet, configDetails.institutionDid)

        val version = "${Random().nextInt() % 100 + 100}.${Random().nextInt() % 100 + 100}.${Random().nextInt() % 100 + 100}"
        val schemaHandle = SchemaApi.schemaCreate(
                "example",
                "example",
                version,
                SerializationUtils.anyToJSON(listOf("sex", "name", "height", "age")),
                0
        ).get()
        val schemaResponse = SerializationUtils.jSONToAny<VcxSchemaResponse>(SchemaApi.schemaSerialize(schemaHandle).get())

        val credDefHandle = CredentialDefApi.credentialDefCreate(
                "cred_def_id",
                "degree",
                schemaResponse.data.schemaId,
                configDetails.institutionDid,
                "tag1",
                SerializationUtils.anyToJSON(VcxCredentialDefinitionConfig()),
                0
        ).get()
        val credDefResponse = SerializationUtils.jSONToAny<VcxCredentialDefinitionResponse>(CredentialDefApi.credentialDefSerialize(credDefHandle).get())


        // DO SOME SHIT IN INDY
        val credValues = """
            {
                "sex": {"raw": "male", "encoded": "5944657099558967239210949258394887428692050081607692519917050"},
                "name": {"raw": "Alex", "encoded": "1139481716457488690172217916278103335"},
                "height": {"raw": "175", "encoded": "175"},
                "age": {"raw": "28", "encoded": "28"}
            }
        """.trimIndent()

        // Issuing credential
        val credOffer = me.createCredentialOffer(CredentialDefinitionId.fromString(credDefResponse.data.id))
        val credRequest = me.createCredentialRequest(me.did, credOffer, "main")
        val cred = me.issueCredential(credRequest, credValues, credOffer)

        // Receiving it
        me.receiveCredential(cred, credRequest, credOffer)

        /*
        {"credential":{"schema_id":"V4SGRU86Z58d6TV7PBUe6f:2:example:43.19.64","cred_def_id":"V4SGRU86Z58d6TV7PBUe6f:3:CL:80:tag1","values":{"height":{"raw":"175","encoded":"175"},"sex":{"raw":"male","encoded":"5944657099558967239210949258394887428692050081607692519917050"},"name":{"raw":"Alex","encoded":"1139481716457488690172217916278103335"},"age":{"raw":"28","encoded":"28"}},"signature":{"p_credential":{"m_2":"49667387409072791895333303899794250195621079019939037173941098352432267351052","a":"708106352432507212337563417401848354331371770065084660954532803014633593032683473170864235075808436520170738013875744685683137634902896747613303012778114215465791569463107762520268103335370987028817208216668147425146798192476705754284709154792625120286262266474133994546635300345481846082689509036276052446854839884059556513991765289395573809762619647247822256290883213027377804255507064378973829651771660349821546605510818074764017055523741186684987648758645860055041901740930025077356314475179592401371387551340635690407005110583035290277179700968478042009105106744789010000682553724000844050965954367202668320931","e":"259344723055062059907025491480697571938277889515152306249728583105665800713306759149981690559193987143012367913206299323899696942213235956742929814798257937934537889203748067852961","v":"9792515787224158742139834086164770351887647478163419180817509382878701203254491605575478329551617963547376881323533834691330609899766714295976854841008911970390655141775182961118095500829070600646300397044725359008719250806248266998556996745025822450923566574275536530521600670062645752443219085020425962489471110502493989166124251504866491283306017130306144774345845337479447176129717315160258660983328668791527702147128765502404585081337433177658094224659922845599597096223553472119741869427861823671890523645083938487886546539504490922433561778327001322437537676922163731401280658347091441524466459903433880254501031212565538127856454252224430010804773871482331368895509599430360741008242644379112866555344043989142287289302006775043995767998006149625705638109198268215914298896959419962050511741063411389533568578807"}},"signature_correctness_proof":{"se":"9005868620886646421267333069867964100292738546089610827900696687187631245244202664163650623075004368681203804603448516809700936276251241489822855879768988198234295418812321046570423278795944882740255935153429294305092422769660925476985658054946762917887809070066721474432176517022016298228804400745379966635176841492130585888944869988101096368787594891254346457126334161403129659238797384747514592641506722601873326009133768843248150245248417436895423301031043988803940796579875369620738120106362028498910880664692509556953058048378586232987134583969933753754980537038030710469458298970814367297424847705326425419325","c":"68217999199020190615202896950538459640520830473336124301356915406899273373465"}}}
        {"request":{"prover_did":"V4SGRU86Z58d6TV7PBUe6f","cred_def_id":"V4SGRU86Z58d6TV7PBUe6f:3:CL:80:tag1","blinded_ms":{"u":"67324830629425984582842894772152227021081867589881608946325907702053754580407455727921090948953117778679545579381780514881295882164178676751603677514313498234970754363441860979887536119478976362917093442766388970338544732919328654523437999534581021081514994922707360213079154808330055492964614003179147547026500676468939195338378905485816473579061951161952435681890636381689492779427790170774494809143082435362863688595369743124665496956808203698593263932257107759502311464836506499470175958086964333503094042604167429381637551531857606677233820187333477839960782400680536741314680449446492386954328108437673674682894","hidden_attributes":["master_secret"],"committed_attributes":{}},"blinded_ms_correctness_proof":{"c":"16138765764672005608638122178747317890992903644329359857894172128827302896969","v_dash_cap":"457595880601144880627106919825185167081972014629928967578723716568103922882978620668401654000008937426911619769582238754166405321800475545171653968886332168694292939005273407157289000973233607569099776181515342714056998699665625287420776500738257743952418079426997034124461914434524630435904139288698453688047317894439630551577982337185816187835464786880968072191944179626733016230939795908889019887336931453696091471008456595881742605526143587358836926776045420745050367556720764800970493577042286377800493485190486006684547498808389306992326985917823490298630191729504504714880626759918356598183234178474764905339454640963139519076660559095149508934959365411136089898683217161679121045872594819255611773883320660749","m_caps":{"master_secret":"18354619559211524535086323026136253141298808550307060770511469082169319575671861753911732182690104913133976170799361100213561639116865772738559386712668554908992925822374640084550"},"r_caps":{}},"nonce":"12975250785937532500790"},"metadata":{"master_secret_blinding_data":{"v_prime":"28353833699156162147448922095799835563359208432664098945232479003475703225199196516217892356868092538179987816412980505628551942621455589824367851164046473051227966899979856654297648197217912061619940566239960113803183220978961017635765168488979440060472976304085606203548338832552681791575058921701291649494172355759489606605592295176680240378232395383254258750106060932895952857521689487928309639377697412001894445440159955370462791086658592809611973683871272858839697235712249601343431571809670872147479622929340897124053154831036762597252573003844632823008050918941713684206456911426224477112835716714829672887582771785388415868761689500"},"master_secret_name":"123","nonce":"12975250785937532500790"}}
        {"schema_id":"V4SGRU86Z58d6TV7PBUe6f:2:example:43.19.64","cred_def_id":"V4SGRU86Z58d6TV7PBUe6f:3:CL:80:tag1","key_correctness_proof":{"c":"10319202377296187459030610872456479563660662060616053435346204256519314895637","xz_cap":"145985279444255053244744614925737218488328307486524150265505567232079185981520646482132131297710387937206181147883641767449199763280065833606311393591177472836178983958340336873971283799854136977951614339721776767609008475416126797857368744340336262273700574416072692394974311182815155897181409944895327579484948862875144580917679807039920220755149307681395061308413050739606995043300516973648524463761920289116417545363373504355943219799190734264402865295942721457219405400635283920415821406767200666266218870988457769483552821752627175966810811406063816410784721445402241856464357521173650822556474223711142148494221208141416565110344044333360688243002698638568360212579880599437588185088926","xr_cap":[["name","54639243474749505437087922177051162126233508296475726279322814470411496801373592728198006686715260855210330452335382994780054815536045107596821551944169298456956108156931289480284628820515211006732868447497441941761403446261332676257299850381715474855996584812767516127697044549534028324214151229383005480106174218700293246072345549077026868107913313737279111083743265867772896551217854340729987959696225601119059823973101883400757811781238278610865431590041612273805209857428426716919045939694456332560603207241188288635439551663647420538747150006333499752955350155738262823915690337123599372933069350563883188069544913311553424388053504076566135111548873216842953141809302883936290391189946"],["age","11279219332732693908992359026166900635186184858527732067252730843998275794298873480552300030146198786449729253516744247466710939022707444697940151468034155832144297696978520864744275508138264278114217659894354503244324231062940309820589339667933459632284893846759868014851354952019060522698301107036308251321431400164330810100006435047788657990619964247334971842136238329395207618756235828045207884627835780806504912260245637568982180452714311478533201374826330559861536272980235754195482909181406853575736025040509545068279957056834928902683869393764415944904071961836562452031234515200260638956209106685060919262549306835345454067226532302228096028224649816635445171400031904524654864740798"],["height","170351239447401904299432370034664143339838944115919797389780978325428597235382328976914473952822513466666061600720923775580620656121509561082683758025467342276796035322131952322782749890189969467781775071029006946987036021396903945212645585067945204539827156195725472069035839183248680908951382134977412470943024042477357562186167376321204126923544242213396901234990000909430405117360247153103980360636518253730850547449960987974178178748982185923399385658763195303839986384984897350251647301229987812253236149788149147977588263766756252289164809092827565319352143321122098291468865672886275818971459912124354171500119437358071621354427224665256016218849138143148878173791824349447579540667211"],["master_secret","70635493092963119286953212858022905007353097808453982432265036521248553293895337924874321874046833477673435932078651444774560698382717101547059851712158296762564985810871659435709515073413162150296792889302826011394164886606801817500755721703263426447945334942847199909528475885513121410843568823120628264738161089480011153045859569578791822949667662757079502061012822242740721749772041207110539756659934353617540732963115712642261691386175262523539707936880196680949021753124958107675841529440027195990088336115559170969295067378359808976133604530486836149171973357849182626732873672026320181099132300468211927274954493854524949273877955868107029292304652495100329645712724203382860394270153"],["sex","554402151860981086499768603766726723500060239071230230223560679002214250486081240587461664314327272947960263382550987371537335914113132367474602807587182398514506268043222055506110270007611132235593155450644624412057957667184298415594721278094437999289441629031983035510803970877347159996300382627269345391643841521945579805164751398373775322890724107457686318379412903167062408757998961582634690739092872001730545277280164867583052215814292576812422472744152619279267217600754488650873872899348128571861480281160505865743181981309147008047824409296772458532513917891902489540998117111447821952218111402801539948725617298106444076080238618586378230006810487532543591085216044168797943781430"]]},"nonce":"944559361059481910445825"}
         */

        // Request proof
        val fieldName = CredentialFieldReference("name", schemaResponse.data.schemaId, credDefResponse.data.id)
        val fieldSex = CredentialFieldReference("sex", schemaResponse.data.schemaId, credDefResponse.data.id)
        val fieldAge = CredentialFieldReference("age", schemaResponse.data.schemaId, credDefResponse.data.id)
        val proofReq = IndyUser.createProofRequest(
                version = "0.1",
                name = "proof_req_0.1",
                attributes = listOf(fieldName, fieldSex),
                predicates = listOf(CredentialPredicate(fieldAge, 18))
        )

        // Create proof
        val proofIndy = me.createProof(proofReq, "main")

        // Verify proof
        val usedData = IndyUser.getDataUsedInProof(me.did, pool, proofReq, proofIndy)
        assert(me.verifyProof(proofReq, proofIndy, usedData)) { "Proof is invalid" }

        // DO SAME SHIT IN VCX

        // Issuer create connection
        val connectionToMyselfProverHandle = ConnectionApi.vcxConnectionCreate("Me as Prover").get()
        ConnectionApi.vcxConnectionConnect(connectionToMyselfProverHandle, SerializationUtils.anyToJSON(VcxConnectionConfig())).get()
        ConnectionApi.vcxConnectionUpdateState(connectionToMyselfProverHandle).get()
        val inviteDetails = ConnectionApi.connectionInviteDetails(connectionToMyselfProverHandle, 0).get()

        // Prover create connection
        val connectionToMyselfIssuerHandle = ConnectionApi.vcxCreateConnectionWithInvite("Me as Issuer", inviteDetails).get()
        ConnectionApi.vcxConnectionConnect(connectionToMyselfIssuerHandle, SerializationUtils.anyToJSON(VcxConnectionConfig())).get()
        ConnectionApi.vcxConnectionUpdateState(connectionToMyselfIssuerHandle).get()

        // Update Issuer connection
        ConnectionApi.vcxConnectionUpdateState(connectionToMyselfProverHandle).get()

       /* // Issuer send cred offer
        val credentialAttributes = mapOf(
                "name" to "Alex",
                "sex" to "male",
                "height" to "210",
                "age" to "28"
        )

        val credentialIssuerHandle = IssuerApi.issuerCreateCredential(
                "credential_id",
                credDefHandle,
                configDetails.institutionDid,
                SerializationUtils.anyToJSON(credentialAttributes),
                "my_passport",
                0
        ).get()

        IssuerApi.issuerSendcredentialOffer(credentialIssuerHandle, connectionToMyselfProverHandle).get()

        // Prover send cred request
        val offersJson = CredentialApi.credentialGetOffers(connectionToMyselfIssuerHandle).get()
        val offers = SerializationUtils.jSONToAny<List<List<CredentialOffer>>>(offersJson)
        val credentialProverHandle = CredentialApi.credentialCreateWithOffer("My credential", SerializationUtils.anyToJSON(offers.first())).get()
        CredentialApi.credentialSendRequest(credentialProverHandle, connectionToMyselfIssuerHandle, 0).get()

        // Issuer send credential
        IssuerApi.issuerCredentialUpdateState(credentialIssuerHandle).get()
        IssuerApi.issuerSendCredential(credentialIssuerHandle, connectionToMyselfProverHandle).get()

        *//*
        {"data":{"agent_did":"aKALumDMDWNz4S1AJobhf","agent_vk":"KA6RReMfm16L7tEznFBsmS6k5dhn9ny5q4KLyjUYmfk","cred_id":"21515879-abd8-46fa-9757-fdeda7fdf147","credential":"{\"libindy_cred\":\"{\\\"schema_id\\\":\\\"V4SGRU86Z58d6TV7PBUe6f:2:example:43.19.64\\\",\\\"cred_def_id\\\":\\\"V4SGRU86Z58d6TV7PBUe6f:3:CL:80:tag1\\\",\\\"rev_reg_id\\\":null,\\\"values\\\":{\\\"age\\\":{\\\"raw\\\":\\\"28\\\",\\\"encoded\\\":\\\"28\\\"},\\\"name\\\":{\\\"raw\\\":\\\"Alex\\\",\\\"encoded\\\":\\\"99262857098057710338306967609588410025648622308394250666849665532448612202874\\\"},\\\"sex\\\":{\\\"raw\\\":\\\"male\\\",\\\"encoded\\\":\\\"5944657099558967239210949258394887428692050081607692519917050011144233115103\\\"},\\\"height\\\":{\\\"raw\\\":\\\"210\\\",\\\"encoded\\\":\\\"210\\\"}},\\\"signature\\\":{\\\"p_credential\\\":{\\\"m_2\\\":\\\"91107832027605103923445066316013165053102068239087932268884675971330558106899\\\",\\\"a\\\":\\\"15935243082556255489704762026947919705846833536611728108593904002014002165499042659789699403887414616042429024830533053123110590619084511855273547762178094963922127404158002551223776178145875987720328204171161589993105137460257658505454522443634681132085501517293070243845046185072329438796272773059491756107261772646672401865857333151138912540176370567287960024080138105329867207863735331162143771427229451938183089940284475212595600195750020042800598965641302087614548337034000370127239150024577924199811261939303543553022301586357395845353233109991735590253176278156372236837113111634196342033976340092282555453416\\\",\\\"e\\\":\\\"259344723055062059907025491480697571938277889515152306249728583105665800713306759149981690559193987143012367913206299323899696942213235956742929788939700115888530625344965194433003\\\",\\\"v\\\":\\\"8127660978624123220399142705390536744625793074099936944358181778932828149727921872103676666922237705871819305912020221532509207145777296116689945859052786560843889824916825996462590414059052773831684743958120670904743091326010958961256461680486842910578055329877456281182211690641890608146789265018741734347689211346766901089437021091869264951477283236320057021377680178362849456672967625310096595147009031061811196222884115918080230524815556906899416443263529914347667417497663565972562820580046039758395108908048908542625748195291674738958711546527345494028836131174562941008915128260788950201514801866353846772169325868991780175368516972290188526323650920343497884027886133623684685027180376378264425829360824942042357419623198459082023603519598601198025243044521008168269407554226760056999742870071961974782502256003\\\"},\\\"r_credential\\\":null},\\\"signature_correctness_proof\\\":{\\\"se\\\":\\\"1735688286412551039476758851571309122213912448968460628661490375202300203657706847699544486541717491630547459155442195637675642888602769260961415255767880940451581261273517670049025240060749435516706357369455125148815335570980428178795606785743920004232202351781566054796123308985328203114836749852134458630661969924825351961520588343179955412415770684350317750064115399064260120184576083330634363365179997785178847943045514236913897575726229496468306668943544672997168552180700618074866565358378642919008493143601268614963807486463334769151658083233345223860246409557202210723131385551302743504266760922297971498856\\\",\\\"c\\\":\\\"47562750167768591718138642378290604922889269143140739751218509736467522668164\\\"},\\\"rev_reg\\\":null,\\\"witness\\\":null}\",\"rev_reg_def_json\":\"\",\"cred_def_id\":\"V4SGRU86Z58d6TV7PBUe6f:3:CL:80:tag1\",\"msg_type\":\"CRED\",\"claim_offer_id\":\"TxOHWtjpiU\",\"version\":\"0.1\",\"from_did\":\"4mRPsJqgTpUbQ7JT68fht7\"}","credential_name":null,"credential_offer":{"claim_id":"credential_id","claim_name":"my_passport","cred_def_id":"V4SGRU86Z58d6TV7PBUe6f:3:CL:80:tag1","credential_attrs":{"age":"28","height":"210","name":"Alex","sex":"male"},"from_did":"4mRPsJqgTpUbQ7JT68fht7","libindy_offer":"{\"schema_id\":\"V4SGRU86Z58d6TV7PBUe6f:2:example:43.19.64\",\"cred_def_id\":\"V4SGRU86Z58d6TV7PBUe6f:3:CL:80:tag1\",\"key_correctness_proof\":{\"c\":\"10319202377296187459030610872456479563660662060616053435346204256519314895637\",\"xz_cap\":\"145985279444255053244744614925737218488328307486524150265505567232079185981520646482132131297710387937206181147883641767449199763280065833606311393591177472836178983958340336873971283799854136977951614339721776767609008475416126797857368744340336262273700574416072692394974311182815155897181409944895327579484948862875144580917679807039920220755149307681395061308413050739606995043300516973648524463761920289116417545363373504355943219799190734264402865295942721457219405400635283920415821406767200666266218870988457769483552821752627175966810811406063816410784721445402241856464357521173650822556474223711142148494221208141416565110344044333360688243002698638568360212579880599437588185088926\",\"xr_cap\":[[\"name\",\"54639243474749505437087922177051162126233508296475726279322814470411496801373592728198006686715260855210330452335382994780054815536045107596821551944169298456956108156931289480284628820515211006732868447497441941761403446261332676257299850381715474855996584812767516127697044549534028324214151229383005480106174218700293246072345549077026868107913313737279111083743265867772896551217854340729987959696225601119059823973101883400757811781238278610865431590041612273805209857428426716919045939694456332560603207241188288635439551663647420538747150006333499752955350155738262823915690337123599372933069350563883188069544913311553424388053504076566135111548873216842953141809302883936290391189946\"],[\"age\",\"11279219332732693908992359026166900635186184858527732067252730843998275794298873480552300030146198786449729253516744247466710939022707444697940151468034155832144297696978520864744275508138264278114217659894354503244324231062940309820589339667933459632284893846759868014851354952019060522698301107036308251321431400164330810100006435047788657990619964247334971842136238329395207618756235828045207884627835780806504912260245637568982180452714311478533201374826330559861536272980235754195482909181406853575736025040509545068279957056834928902683869393764415944904071961836562452031234515200260638956209106685060919262549306835345454067226532302228096028224649816635445171400031904524654864740798\"],[\"height\",\"170351239447401904299432370034664143339838944115919797389780978325428597235382328976914473952822513466666061600720923775580620656121509561082683758025467342276796035322131952322782749890189969467781775071029006946987036021396903945212645585067945204539827156195725472069035839183248680908951382134977412470943024042477357562186167376321204126923544242213396901234990000909430405117360247153103980360636518253730850547449960987974178178748982185923399385658763195303839986384984897350251647301229987812253236149788149147977588263766756252289164809092827565319352143321122098291468865672886275818971459912124354171500119437358071621354427224665256016218849138143148878173791824349447579540667211\"],[\"master_secret\",\"70635493092963119286953212858022905007353097808453982432265036521248553293895337924874321874046833477673435932078651444774560698382717101547059851712158296762564985810871659435709515073413162150296792889302826011394164886606801817500755721703263426447945334942847199909528475885513121410843568823120628264738161089480011153045859569578791822949667662757079502061012822242740721749772041207110539756659934353617540732963115712642261691386175262523539707936880196680949021753124958107675841529440027195990088336115559170969295067378359808976133604530486836149171973357849182626732873672026320181099132300468211927274954493854524949273877955868107029292304652495100329645712724203382860394270153\"],[\"sex\",\"554402151860981086499768603766726723500060239071230230223560679002214250486081240587461664314327272947960263382550987371537335914113132367474602807587182398514506268043222055506110270007611132235593155450644624412057957667184298415594721278094437999289441629031983035510803970877347159996300382627269345391643841521945579805164751398373775322890724107457686318379412903167062408757998961582634690739092872001730545277280164867583052215814292576812422472744152619279267217600754488650873872899348128571861480281160505865743181981309147008047824409296772458532513917891902489540998117111447821952218111402801539948725617298106444076080238618586378230006810487532543591085216044168797943781430\"]]},\"nonce\":\"773994106506235212769089\"}","msg_ref_id":"TxOHWtjpiU","msg_type":"CRED_OFFER","schema_seq_no":0,"to_did":"4mRPsJqgTpUbQ7JT68fht7","version":"0.1"},"credential_request":{"cred_def_id":"V4SGRU86Z58d6TV7PBUe6f:3:CL:80:tag1","from_did":"5apy2WZX84gFNjPDZpq9ew","libindy_cred_req":"{\"prover_did\":\"5apy2WZX84gFNjPDZpq9ew\",\"cred_def_id\":\"V4SGRU86Z58d6TV7PBUe6f:3:CL:80:tag1\",\"blinded_ms\":{\"u\":\"402657637237466559432983935132951524769257081120860969720738199441687645882773318344483829580595871574422090254116992863353993419536985271779249146066906938607311406408512450177116281114377743774973474728536741792614036095863348417934225171064825720458551512008497354241876198012421137577985349388571220344780835930922364656889857813296599093094186062946441736629962184096760085490184672589110186339333871110865036675928999443946501400569991044373813533720125550667532194387134669441560505939968427018714269129659499226789314441126677470307542230724495590925573500417780141158550639700236286574914531360216767457844\",\"ur\":null,\"hidden_attributes\":[\"master_secret\"],\"committed_attributes\":{}},\"blinded_ms_correctness_proof\":{\"c\":\"4124793783178272060230695709590023129190866951606202825462778114680138649404\",\"v_dash_cap\":\"33972783014330037923610245995462781424534824532218214149727585981037623160448714741147439816956267915059410952878888598321268601725775784826849104357131395263646188137560143465001339905010321463216061929310441254676813330248695099330385781168544698296117460079268140867441216276247690645282956033525376794214499026869850633725773865481564238540076637653584607186127251367541849717265178335401178353189296720020713067373272565353243286033666641853593269365233346228948981917257908426983572412273952826562167322037726289123360688413076909992615270829098434271536559597011318794507378182621706589417517781024614816846712541947893556371666207042588398660927937126387806968482972539980339876437386579293872751916327533279\",\"m_caps\":{\"master_secret\":\"31262181880244103889957582758699929174201076418906741561064706118427519951914920842404940577879016752917193866992637499363341010536243375932387763186332098769713963961194307443765\"},\"r_caps\":{}},\"nonce\":\"796801019970020968548077\"}","libindy_cred_req_meta":"{\"master_secret_blinding_data\":{\"v_prime\":\"8236237930942824740751619323529926254882426226289015376185010519576172627072368018762000339158807296041353658243977068117193455984862595133042158759423720020453022167541886464110927441097429482611547831701453647233930701584193385605806004756676662037199113309555693822038616051051914560459270200149837677655811592728225913802055926247266333493106652082947536149801717938457854427844979964864231223543000656500580255098730712707014246196343013892147866129716254354161603206177974798922873305961338161926541092218708613091925315345680014050789678810223356046094069624912773897752320695556397823147970747706013741266949974674188087469600220747\",\"vr_prime\":null},\"nonce\":\"796801019970020968548077\",\"master_secret_name\":\"main\"}","mid":"","msg_ref_id":null,"tid":"","to_did":"4mRPsJqgTpUbQ7JT68fht7","version":"0.1"},"msg_uid":"pFUd7j31qd","my_did":"5apy2WZX84gFNjPDZpq9ew","my_vk":"3VtKJLh5nFrZWPs4fq8tPnSe5Pe29C7jAWdFMTm9Qk2a","payment_info":null,"payment_txn":null,"source_id":"My credential","state":4,"their_did":"4mRPsJqgTpUbQ7JT68fht7","their_vk":"343hvBree43grwN6etqXi4pSPzwy9TKCMZYX6xBUrRVV"},"version":"1.0"}
         *//*

        // Prover receive credential
        CredentialApi.credentialUpdateState(credentialProverHandle).get()

        // Issuer update credential state
        IssuerApi.issuerCredentialUpdateState(credentialIssuerHandle).get()*/
        // Issuer create proof request
        val proofRestrictions = listOf(mapOf("schema_id" to schemaResponse.data.schemaId))
        val proofAttributes = listOf(
                mapOf(
                        "name" to "name",
                        "restrictions" to proofRestrictions
                ),
                mapOf(
                        "name" to "sex",
                        "restrictions" to proofRestrictions
                ),
                mapOf(
                        "name" to "age"
                )
        )

        val proofPredicates = listOf(
                mapOf(
                        "name" to "age",
                        "p_type" to ">=",
                        "p_value" to 18,
                        "restrictions" to proofRestrictions
                )
        )

        val proofIssuerHandle = ProofApi.proofCreate(
                "My proof request",
                SerializationUtils.anyToJSON(proofAttributes),
                "[]", //SerializationUtils.anyToJSON(proofPredicates),
                "{}",
                "proof from me"
        ).get()
        ProofApi.proofSendRequest(proofIssuerHandle, connectionToMyselfProverHandle).get()

        // Prover create proof
        val proofRequestsJson = DisclosedProofApi.proofGetRequests(connectionToMyselfIssuerHandle).get()
        val proofRequests = SerializationUtils.jSONToAny<Array<VcxProofRequest>>(proofRequestsJson)
        val proofProverHandle = DisclosedProofApi.proofCreateWithRequest("My proof", SerializationUtils.anyToJSON(proofRequests.first())).get()

        val credentialsJson = DisclosedProofApi.proofRetrieveCredentials(proofProverHandle).get()
        val credentials = SerializationUtils.jSONToAny<VcxRetrievedCredentials>(credentialsJson)

        val rearrangedCredentials = VcxRearrangedRetrievedCredentials(
                credentials.attrs.keys.associate {
                    it to VcxRearrangedRetrievedCredentialAttribute(credentials.attrs.getValue(it).first())
                }
        )
        DisclosedProofApi.proofGenerate(proofProverHandle, SerializationUtils.anyToJSON(rearrangedCredentials), "{}").get()
        DisclosedProofApi.proofSend(proofProverHandle, connectionToMyselfIssuerHandle).get()

        // Issuer check proof
        ProofApi.proofUpdateState(proofIssuerHandle).get()
        val proof = ProofApi.getProof(proofIssuerHandle, connectionToMyselfProverHandle).get()
        assert(proof.proof_state == VcxProofState.Verified.ordinal) { "Proof is invalid" }

        // SHUTDOWN
        VcxApi.vcxShutdown(true)
        wallet.closeWallet().get()
        pool.closePoolLedger().get()
        Pool.deletePoolLedgerConfig("pool1-indy")
    }

    fun openIndyWallet(name: String, key: String): Wallet {

        val walletDir = EnvironmentUtils.getIndyHomePath("wallet")
        val target = Paths.get(walletDir, name)
        val link = Paths.get(walletDir, "$name-indy")

        if (Files.exists(link)) {
            Files.delete(link)
        }
        Files.createSymbolicLink(link, target)

        val walletConfig = SerializationUtils.anyToJSON(WalletConfig("$name-indy"))
        val walletCredentials = """{"key": "$key"}"""

        return Wallet.openWallet(walletConfig, walletCredentials).get()
    }

    @Test
    @Ignore
    fun faber() {
        println("Removing trash")
        StorageUtils.cleanupStorage()

        println("[Faber] Provision agent")
        val configDetailsJson = UtilsApi.vcxAgentProvisionAsync(SerializationUtils.anyToJSON(faberProvisionConfig)).get()

        faberConfigDetails = SerializationUtils.jSONToAny(configDetailsJson)
        faberConfigDetails.institutionName = "Faber"
        faberConfigDetails.institutionLogoUrl = "http://robohash.org/234"
        faberConfigDetails.genesisPath = TEST_GENESIS_FILE_PATH

        println("[Faber] Create pool and wallet")
        VcxApi.vcxInitWithConfig(SerializationUtils.anyToJSON(faberConfigDetails)).get()

        println("[Faber] Create a new schema on the ledger")
        val schemaFields = listOf("name", "date", "degree")

        // randomize version to prevent schema id collisions
        val schemaVersion = "${Random().nextInt(1000)}.${Random().nextInt(1000)}.${Random().nextInt(1000)}"

        val schemaHandle = SchemaApi.schemaCreate("schema_id", "degree_schema", schemaVersion, SerializationUtils.anyToJSON(schemaFields), 0).get()
        val schemaResponse = SerializationUtils.jSONToAny<VcxSchemaResponse>(SchemaApi.schemaSerialize(schemaHandle).get())

        println("Schema: $schemaResponse")

        println("[Faber] Create a new credential definition on the ledger")
        val credDefHandle = CredentialDefApi.credentialDefCreate(
                "cred_def_id",
                "degree",
                schemaResponse.data.schemaId,
                faberConfigDetails.institutionDid,
                "tag1",
                SerializationUtils.anyToJSON(VcxCredentialDefinitionConfig()),
                0
        ).get()
        val credDefResponse = SerializationUtils.jSONToAny<VcxCredentialDefinitionResponse>(CredentialDefApi.credentialDefSerialize(credDefHandle).get())
        println("Credential Definition: $credDefResponse")

        println("[Faber] Create a connection to Alice and print out the invite details")
        val connectionToAliceHandle = ConnectionApi.vcxConnectionCreate("Alice").get()
        val connectionToAliceResponse = SerializationUtils.jSONToAny<VcxConnectionDetailsResponse>(ConnectionApi.connectionSerialize(connectionToAliceHandle).get())

        println("Connection to Alice: $connectionToAliceResponse")
        ConnectionApi.vcxConnectionConnect(connectionToAliceHandle, SerializationUtils.anyToJSON(VcxConnectionConfig())).get()
        ConnectionApi.vcxConnectionUpdateState(connectionToAliceHandle).get()

        println("[Faber] Creating ~/vcx-invite.txt file and printing invite there")
        val inviteDetails = ConnectionApi.connectionInviteDetails(connectionToAliceHandle, 0).get()
        val file = File(INVITE_FILENAME)
        file.createNewFile()
        file.writeText(inviteDetails)
        println("--------- INVITE ---------")
        println(inviteDetails)
        println("--------------------------")

        println("[Faber] Poll agency and wait for Alice to accept the invitation (start alice.py now)")
        while (true) {
            ConnectionApi.vcxConnectionUpdateState(connectionToAliceHandle).get()
            val connectionToAliceState = ConnectionApi.connectionGetState(connectionToAliceHandle).get()
            if (connectionToAliceState == VcxState.Accepted.ordinal)
                break

            Thread.sleep(1000)
        }

        val credentialAttributes = mapOf(
                "name" to "alice",
                "date" to "05-2018",
                "degree" to "maths"
        )

        println("[Faber] Create a Credential object using the schema and credential definition")
        val credentialHandle = IssuerApi.issuerCreateCredential(
                "credential_id",
                credDefHandle,
                faberConfigDetails.institutionDid,
                SerializationUtils.anyToJSON(credentialAttributes),
                "alice_degree_credential",
                0
        ).get()

        println("[Faber] Send credential offer to Alice")
        IssuerApi.issuerSendcredentialOffer(credentialHandle, connectionToAliceHandle).get()

        println("[Faber] Poll agency and wait for Alice to send a credential request")
        while (true) {
            if (IssuerApi.issuerCredentialUpdateState(credentialHandle).get() == VcxState.RequestReceived.ordinal)
                break

            Thread.sleep(1000)
        }

        println("[Faber] Send real credential to Alice")
        IssuerApi.issuerSendCredential(credentialHandle, connectionToAliceHandle).get()

        Thread.sleep(10000)

        println("[Faber] Wait for Alice to accept credential")
        while (true) {
            if (IssuerApi.issuerCredentialUpdateState(credentialHandle).get() == VcxState.Accepted.ordinal)
                break

            Thread.sleep(1000)
        }

        val proofRestrictions = listOf(mapOf("issuer_did" to faberConfigDetails.institutionDid))
        val proofAttributes = listOf(
                mapOf(
                        "name" to "name",
                        "restrictions" to proofRestrictions
                ),
                mapOf(
                        "name" to "date",
                        "restrictions" to proofRestrictions
                ),
                mapOf(
                        "name" to "degree",
                        "restrictions" to proofRestrictions
                )
        )

        println("[Faber] Create a Proof object")
        val proofHandle = ProofApi.proofCreate("Faber's proof request", SerializationUtils.anyToJSON(proofAttributes), "[]", "{}", "proof from Alice").get()

        println("[Faber] Request proof of degree from Alice")
        ProofApi.proofSendRequest(proofHandle, connectionToAliceHandle).get()

        println("[Faber] Poll agency and wait for Alice to provide proof")
        while (true) {
            val proofState = ProofApi.proofUpdateState(proofHandle).get()
            if (proofState == VcxState.Accepted.ordinal)
                break

            Thread.sleep(1000)
        }

        println("[Faber] Process the proof provided by Alice")
        val proof = ProofApi.getProof(proofHandle, connectionToAliceHandle).get()

        println("[Faber] Check if proof is valid")
        assert(proof.proof_state == VcxProofState.Verified.ordinal) { "Proof is invalid" }

        println("Remove wallets")
        VcxApi.vcxShutdown(true)

        println("Removing trash")
        StorageUtils.cleanupStorage()
    }

    @Test
    @Ignore
    fun alice() {
        println("[Alice] Provision agent")
        val configDetailsJson = UtilsApi.vcxAgentProvisionAsync(SerializationUtils.anyToJSON(aliceProvisionConfig)).get()

        aliceConfigDetails = SerializationUtils.jSONToAny(configDetailsJson)
        aliceConfigDetails.institutionName = "Alice"
        aliceConfigDetails.institutionLogoUrl = "http://robohash.org/456"
        aliceConfigDetails.genesisPath = TEST_GENESIS_FILE_PATH

        println("[Alice] Create pool and wallet")
        VcxApi.vcxInitWithConfig(SerializationUtils.anyToJSON(aliceConfigDetails)).get()

        println("[Alice] Trying to read invite from file...")
        while (true) {
            if (File(INVITE_FILENAME).exists())
                break
            Thread.sleep(1000)
        }

        val file = File(INVITE_FILENAME)
        val inviteJson = file.readText()
        file.delete()
        println("[Alice] Invite read success: $inviteJson")

        val connectionHandle = ConnectionApi.vcxCreateConnectionWithInvite("Faber", inviteJson).get()
        ConnectionApi.vcxConnectionConnect(connectionHandle, SerializationUtils.anyToJSON(VcxConnectionConfig())).get()
        ConnectionApi.vcxConnectionUpdateState(connectionHandle).get()

        println("[Alice] Wait for Faber to issue a credential offer")
        var offersJson: String
        while (true) {
            offersJson = CredentialApi.credentialGetOffers(connectionHandle).get()
            if (offersJson.trim().isNotEmpty() && offersJson.trim() != "[]")
                break
            Thread.sleep(1000)
        }
        val offers = SerializationUtils.jSONToAny<List<List<VcxCredentialOffer>>>(offersJson)
        println("[Alice] Received next offers: $offers")

        val credentialHandle = CredentialApi.credentialCreateWithOffer("Alice's credential", SerializationUtils.anyToJSON(offers.first())).get()

        println("[Alice] After receiving credential offer, send credential request")
        CredentialApi.credentialSendRequest(credentialHandle, connectionHandle, 0).get()

        println("[Alice] Poll agency and accept credential offer from Faber")
        while (true) {
            val credentialState = CredentialApi.credentialUpdateState(credentialHandle).get()
            if (credentialState == VcxState.Accepted.ordinal)
                break
            Thread.sleep(1000)
        }

        println("[Alice] Poll agency for a proof request")
        var proofRequestsJson: String
        while (true) {
            proofRequestsJson = DisclosedProofApi.proofGetRequests(connectionHandle).get()
            if (proofRequestsJson.trim().isNotEmpty() && proofRequestsJson.trim() != "[]")
                break
            Thread.sleep(1000)
        }
        val proofRequests = SerializationUtils.jSONToAny<Array<VcxProofRequest>>(proofRequestsJson)
        println("[Alice] Received next proof requests: $proofRequests")

        println("[Alice] Create a Disclosed proof object from proof request")
        val proofHandle = DisclosedProofApi.proofCreateWithRequest("Alice's proof", SerializationUtils.anyToJSON(proofRequests.first())).get()

        println("[Alice] Query for credentials in the wallet that satisfy the proof request")
        val credentialsJson = DisclosedProofApi.proofRetrieveCredentials(proofHandle).get()
        val credentials = SerializationUtils.jSONToAny<VcxRetrievedCredentials>(credentialsJson)

        val rearrangedCredentials = VcxRearrangedRetrievedCredentials(
                credentials.attrs.keys.associate {
                    it to VcxRearrangedRetrievedCredentialAttribute(credentials.attrs[it]!!.first())
                }
        )

        println("[Alice] Generate the proof")
        DisclosedProofApi.proofGenerate(proofHandle, SerializationUtils.anyToJSON(rearrangedCredentials), "{}").get()

        println("[Alice] Send the proof to Faber")
        DisclosedProofApi.proofSend(proofHandle, connectionHandle).get()
    }
}

